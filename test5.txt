#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TOKENS 100

char* remove_spaces(const char* input) {
    int input_length = strlen(input);
    char* without_spaces = malloc(input_length + 1);
    if (without_spaces == NULL) {
        perror("malloc");
        return NULL;
    }

    int j = 0;
    for (int i = 0; i < input_length; i++) {
        if (input[i] != ' ') {
            without_spaces[j] = input[i];
            j++;
        }
    }
    without_spaces[j] = '\0';

    return without_spaces;
}

int tokenize(const char* input, const char* delimiter, char** tokens) {
    char* input_copy = strdup(input);  // Duplicate the input string
    if (input_copy == NULL) {
        perror("strdup");
        return -1;
    }

    // Tokenize the input string based on the delimiter "||"
    char* token = strtok(input_copy, delimiter);
    int token_count = 0;
    while (token != NULL && token_count < MAX_TOKENS) {
        tokens[token_count] = strdup(token);  // Duplicate each token
        if (tokens[token_count] == NULL) {
            perror("strdup");
            break;
        }
        token_count++;
        token = strtok(NULL, delimiter);
    }

    free(input_copy);  // Free the duplicated input string

    return token_count;
}

int compare_tokens(const char** tokens, int token_count) {
    if (token_count <= 1) {
        return 0;  // Only one or no tokens, consider them the same
    }

    const char* first_token = tokens[0];
    for (int i = 1; i < token_count; i++) {
        if (strcmp(first_token, tokens[i]) != 0) {
            return -1;  // Tokens are different
        }
    }

    return 0;  // All tokens are the same
}

int process_input(const char* input) {
    char* without_spaces = remove_spaces(input);
    if (without_spaces != NULL) {
        char* tokens[MAX_TOKENS];
        int token_count = tokenize(without_spaces, "||", tokens);
        if (token_count > 0) {
            int result = compare_tokens((const char**)tokens, token_count);
            for (int i = 0; i < token_count; i++) {
                free(tokens[i]);  // Don't forget to free the memory allocated for each token
            }
            free(without_spaces);  // Don't forget to free the memory allocated for the string without spaces

            return result;
        }
        free(without_spaces);  // Don't forget to free the memory allocated for the string without spaces
    }

    return -1;  // Error or no tokens found
}

int main() {
    char input[100];
    printf("Enter input: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0';  // Remove trailing newline character

    int result = process_input(input);
    if (result == 0) {
        printf("Tokens are the same.\n");
    } else {
        printf("Tokens are different.\n");
    }

    return 0;
}

